drop table LOAN;
drop table ACCOUNT;
drop table CUSTOMER;
drop table BRANCH;


CREATE TABLE BRANCH(
   BRANCH_ID      NUMBER(12) NOT NULL,
   BRANCH_CITY    VARCHAR2(15),
   BRANCH_NAME	  VARCHAR2(15) NOT NULL,
   ASSET          NUMBER(12)
);


CREATE TABLE CUSTOMER (
   CUSTOMER_ID     NUMBER(12) NOT NULL,
   NAME            VARCHAR2(15),
   ADDRESS         VARCHAR2(35),
   SEX             VARCHAR2(6),
   PHONE_NUMBER    NUMBER(12) NOT NULL,
   BRANCH_ID       NUMBER(12) NOT NULL
);

------- NEED AN ACCOUNT TABLE BECAUSE A CUSTOMER CAN HAVE MULTIPLE ACCOUNT------------
--------------------------------------------------------------------------------------

CREATE TABLE ACCOUNT (
 ACCOUNT_NO             NUMBER(12) NOT NULL,
 AMOUNT                 NUMBER(12) CHECK (AMOUNT >= 500),
 BALANCE                NUMBER(12) CHECK (BALANCE >= 500),
 CUSTOMER_ID            NUMBER(12),
 TRANSACTION_IN         NUMBER(12),
 TRANSACTION_STATUS     VARCHAR2(10) DEFAULT 'DEPOSIT',
 START_DATE             DATE,
 LAST_TRANSACTION       DATE DEFAULT SYSDATE
);


CREATE TABLE LOAN (
 LOAN_NUMBER            NUMBER(12) NOT NULL,
 AMOUNT         		NUMBER(10),
 LOAN_DATE              DATE DEFAULT SYSDATE,
 CUSTOMER_ID            NUMBER(12) UNIQUE NOT NULL
);

ALTER TABLE BRANCH ADD CONSTRAINT BRANCH_PK PRIMARY KEY (BRANCH_ID);

ALTER TABLE CUSTOMER ADD CONSTRAINT PK_CUSTOMER PRIMARY KEY (CUSTOMER_ID);
ALTER TABLE CUSTOMER ADD CONSTRAINT FK_BRANCH_CUSTOMER FOREIGN KEY (BRANCH_ID) REFERENCES BRANCH (BRANCH_ID) ON DELETE CASCADE;

ALTER TABLE ACCOUNT ADD CONSTRAINT ACCOUNT_PK PRIMARY KEY (ACCOUNT_NO);
ALTER TABLE ACCOUNT ADD CONSTRAINT FK_CUS_ACCOUNT FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID) ON DELETE CASCADE;

ALTER TABLE LOAN ADD CONSTRAINT PK_LOAN PRIMARY KEY (LOAN_NUMBER);
ALTER TABLE LOAN ADD CONSTRAINT FK_CUS_LOAN FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID) ON DELETE CASCADE;


DESCRIBE LOAN;
DESCRIBE ACCOUNT;
DESCRIBE CUSTOMER;
DESCRIBE BRANCH;

INSERT INTO BRANCH VALUES (333445555, 'DHAKA', 'GULSAN-1', 22000000);
INSERT INTO BRANCH VALUES (333445556, 'DHAKA', 'DHANMONDI', 12000000);
INSERT INTO BRANCH VALUES (333445557, 'BOGRA', 'BOGRA SADAR', 13000000);
INSERT INTO BRANCH VALUES (333445558, 'DHAKA', 'UTTARA', 14000000);

INSERT INTO CUSTOMER VALUES (1234560, 'KAMAL', 'GULSAN-1', 'MALE', 01711123456, 333445555);
INSERT INTO CUSTOMER VALUES (1234561, 'JAMAL', 'GULSAN-2', 'MALE', 01711123457, 333445556);
INSERT INTO CUSTOMER VALUES (1234562, 'RIMA', 'GULSAN-1', 'FEMALE', 01711123458, 333445557);


SELECT * FROM BRANCH;
SELECT * FROM CUSTOMER;
SELECT * FROM ACCOUNT;
SELECT * FROM LOAN;

SELECT TO_CHAR(LAST_TRANSACTION, 'dd-yyyy-mm hh24:mi:ss') my_date FROM ACCOUNT;


-- IN WHICH BRANCH THE CUSTOMER WHO ARE ASSOCIATED
-------------------------------------------------------
SELECT B.BRANCH_NAME, C.NAME FROM BRANCH B NATURAL JOIN CUSTOMER C;

SELECT C.NAME, A.BALANCE FROM CUSTOMER C NATURAL JOIN ACCOUNT A;

SELECT C.NAME, L.AMOUNT FROM CUSTOMER C NATURAL JOIN LOAN L;

-- THE CUSTOMER WHO HAVE ONLY ONE ACCOUNT
-------------------------------------------------
SELECT DISTINCT (CUSTOMER_ID) FROM ACCOUNT;

-- TOTAL ASSET OF THE BANK OR SUM OF ASSET OF ALL BRANCH
----------------------------------------------------------
SELECT SUM(ASSET) FROM BRANCH;

DESCRIBE CUSTOMER;
SELECT COUNT(*), COUNT(CUSTOMER_ID) FROM CUSTOMER;


SELECT * FROM CUSTOMER C RIGHT OUTER JOIN ACCOUNT A ON C.CUSTOMER_ID = A.CUSTOMER_ID;

-- AN SQL MULTI QUERY OF FINDING CUSTOMER NAME WHO HAVE BOTH DEPOSIT ACCOUNT IN ACCOUNT TABLE AND BORROWER ACCOUNT IN LOAN TABLE
---------------------------------------------------------------------------------------------------------------------------------
SELECT CUSTOMER.NAME FROM CUSTOMER WHERE CUSTOMER.CUSTOMER_ID IN 
(SELECT A.CUSTOMER_ID FROM ACCOUNT A CROSS JOIN LOAN L WHERE A.CUSTOMER_ID=L.CUSTOMER_ID);




--------------------------- NUMBER OF CUSTOMER----------------------------
SET SERVEROUTPUT ON
DECLARE   
CUSTOMER_NO CUSTOMER.CUSTOMER_ID%type;
begin
	SELECT COUNT(CUSTOMER_ID) INTO CUSTOMER_NO FROM CUSTOMER;
	DBMS_OUTPUT.PUT_LINE('The number of CUSTOMER is : ' || CUSTOMER_NO);
end;
/


 
 
 --A TRIGGER FOR TRASACTION IN ACCOUNT TABLE IF DEPOSIT THEN ADD WITH BALANCE ELSE SUB WITH BALANCE
 ---------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER AU_ACCOUNT
BEFORE INSERT OR UPDATE ON ACCOUNT
FOR EACH ROW
ENABLE
DECLARE
	NEW_TRANSACTION         ACCOUNT.TRANSACTION_IN%TYPE;
BEGIN
	IF INSERTING THEN
		:NEW.BALANCE := :NEW.AMOUNT;
		:NEW.TRANSACTION_IN := :NEW.AMOUNT;
	
	ELSIF UPDATING THEN
		IF :NEW.TRANSACTION_STATUS = 'DEPOSIT' THEN
			:NEW.BALANCE := :OLD.BALANCE + :NEW.AMOUNT;
			:NEW.TRANSACTION_IN := :OLD.TRANSACTION_IN + :NEW.AMOUNT;
			:NEW.LAST_TRANSACTION := SYSDATE;
			DBMS_OUTPUT.PUT_LINE('TRANSACTION DEPOSIT');
		
		ELSIF :NEW.TRANSACTION_STATUS = 'WITHDRAW' THEN
			:NEW.BALANCE := :OLD.BALANCE - :NEW.AMOUNT;
			DBMS_OUTPUT.PUT_LINE('TRANSACTION WITHDRAW');
		END IF;
	END IF;
END;
/


 
----------------------------------------------------------------
--------CREATE A SEQUENCE TO AUTO GENERATE COLUMN VALUE N-------
DROP SEQUENCE a;
CREATE SEQUENCE a
MINVALUE 0
START WITH 1
INCREMENT BY 1;

drop table AUDIT_ACCOUNT; 
 CREATE TABLE AUDIT_ACCOUNT (
	N                      NUMBER(4),
	ACCOUNT_NO             NUMBER(12) NOT NULL,
	AMOUNT                 NUMBER(12) CHECK (AMOUNT >= 500),
	BALANCE                NUMBER(12) CHECK (BALANCE >= 500),
	CUSTOMER_ID            NUMBER(12),
	TRANSACTION_IN         NUMBER(12),
	TRANSACTION_STATUS     VARCHAR2(10),
	LAST_TRANSACTION       DATE DEFAULT SYSDATE
);




------------------A trigger for AUDIT_ACCOUNT TABLE FOR KEEPING THE TRACK OF TRANSACTION ---------------------
CREATE OR REPLACE TRIGGER ACCOUNT_AUDIT
AFTER INSERT OR UPDATE ON ACCOUNT
FOR EACH ROW
DECLARE

BEGIN
	IF INSERTING THEN
		INSERT INTO AUDIT_ACCOUNT (N, ACCOUNT_NO, AMOUNT, BALANCE, CUSTOMER_ID) 
		VALUES (a.nextval, :NEW.ACCOUNT_NO, :NEW.AMOUNT, :NEW.BALANCE, :NEW.CUSTOMER_ID);

	ELSIF UPDATING THEN
		INSERT INTO AUDIT_ACCOUNT (N, ACCOUNT_NO, AMOUNT, BALANCE, TRANSACTION_STATUS, LAST_TRANSACTION)
		VALUES (a.nextval, :OLD.ACCOUNT_NO, :NEW.AMOUNT, :NEW.BALANCE, :NEW.TRANSACTION_STATUS, SYSDATE);
	
	END IF;
	
END;
/



------------------------------ INSERTING DATA INTO ACCOUNT TABLE-----------------------------

INSERT INTO ACCOUNT (ACCOUNT_NO, AMOUNT, CUSTOMER_ID, START_DATE) VALUES (123450, 500, 1234560, SYSDATE);
INSERT INTO ACCOUNT (ACCOUNT_NO, AMOUNT, CUSTOMER_ID, START_DATE) VALUES (123451, 1000, 1234561, SYSDATE);
INSERT INTO ACCOUNT (ACCOUNT_NO, AMOUNT, CUSTOMER_ID, START_DATE) VALUES (123452, 2000, 1234562, SYSDATE);


SELECT * FROM ACCOUNT;
SELECT * FROM LOAN;

-------------------------UPDATING ACCOUNT TABLE AND FIRED TRIGGER AU_ACCOUNT---------------
UPDATE ACCOUNT SET AMOUNT=4000, TRANSACTION_STATUS='DEPOSIT' WHERE ACCOUNT_NO=123450;
UPDATE ACCOUNT SET AMOUNT=5000, TRANSACTION_STATUS='WITHDRAW' WHERE ACCOUNT_NO=123450;

UPDATE ACCOUNT SET AMOUNT=60000, TRANSACTION_STATUS='DEPOSIT' WHERE ACCOUNT_NO=123450;




-- LOAN CONSTRAINT TO CREATE LOAN ACCOUNT OR NOT ---- LOAN CANNOT BE CREATED MINIMUM TRANSACTION 50000 TAKA.
------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER LU_LOAN
BEFORE INSERT OR UPDATE ON LOAN
FOR EACH ROW
ENABLE
DECLARE
	NEW_TRANSACTION         ACCOUNT.TRANSACTION_IN%TYPE;
	N_CUSTOMER_ID           LOAN.CUSTOMER_ID%TYPE;
BEGIN
	SELECT TRANSACTION_IN INTO NEW_TRANSACTION FROM ACCOUNT WHERE ACCOUNT.CUSTOMER_ID = :NEW.CUSTOMER_ID;
	IF INSERTING AND NEW_TRANSACTION < 50000 THEN
		raise_application_error( -20001, 'LOAN CANNOT BE CREATED MINIMUM TRANSACTION 50000 TAKA.');
	ELSE
		DBMS_OUTPUT.PUT_LINE('LOAN CREATED');
	END IF;
END;
/


--------- LOAN CANNOT BE CREATED MINIMUM TRANSACTION 50000 TAKA. ---------------
INSERT INTO LOAN (LOAN_NUMBER, AMOUNT, CUSTOMER_ID) VALUES (1230, 1000, 1234560);

INSERT INTO LOAN (LOAN_NUMBER, AMOUNT, CUSTOMER_ID) VALUES (1231, 1000, 1234561);
INSERT INTO LOAN (LOAN_NUMBER, AMOUNT, CUSTOMER_ID) VALUES (1232, 1000, 1234562);



-----------------CLOSE AN ACCOUNT -----------------
DELETE FROM ACCOUNT WHERE ACCOUNT_NO = 123452;



--------------- PROCEDURE IN PLSQL-----------------
----------AVERAGE ASSET CALCULATING OF ALL BRANCH-------------

CREATE OR REPLACE FUNCTION AVG_BALANCE RETURN NUMBER IS
   B_ASSET          NUMBER(12);
BEGIN
  SELECT AVG(ASSET) INTO B_ASSET
  FROM BRANCH;
   RETURN B_ASSET;
END;
/

----------------CALL PROCEDURE AVG_BALANCE------------------
SET SERVEROUTPUT ON
BEGIN
	dbms_output.put_line('Average balance: ' || AVG_BALANCE);
END;
/

---------------------------------------------------------------
-------------PROCEDURE FOR ADDING 15% INTEREST ----------------

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE ADD_INTEREST(TEMP_ACCOUNT_NO ACCOUNT.ACCOUNT_NO%TYPE) IS
L_DATE      DATE;
L_BALANCE   NUMBER(12);
BEGIN

	SELECT LAST_TRANSACTION, BALANCE  INTO L_DATE, L_BALANCE FROM ACCOUNT WHERE ACCOUNT_NO=TEMP_ACCOUNT_NO;
	
	UPDATE ACCOUNT SET BALANCE = L_BALANCE + (L_BALANCE*.15) WHERE ACCOUNT_NO=TEMP_ACCOUNT_NO;
	DBMS_OUTPUT.PUT_LINE (' BALANCE = ' || L_BALANCE);
		
END;
/

BEGIN
	ADD_INTEREST(123450);
END;
/

